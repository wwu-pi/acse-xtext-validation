/*
 * generated by Xtext 2.9.2
 */
package de.wwu.pi.acse.xtext.validationexample.serializer;

import com.google.inject.Inject;
import de.wwu.pi.acse.xtext.validationexample.services.ValDslGrammarAccess;
import de.wwu.pi.acse.xtext.validationexample.valDsl.Entity;
import de.wwu.pi.acse.xtext.validationexample.valDsl.Model;
import de.wwu.pi.acse.xtext.validationexample.valDsl.ValDslPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ValDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ValDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ValDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ValDslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ValDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID visibility=Visibility superEntity=[Entity|ID]?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     entities+=Entity+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
