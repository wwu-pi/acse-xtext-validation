/*
 * generated by Xtext 2.9.2
 */
package de.wwu.pi.acse.xtext.validationexample.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import de.wwu.pi.acse.xtext.validationexample.valDsl.Entity
import de.wwu.pi.acse.xtext.validationexample.valDsl.ValDslPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ValDslScopeProvider extends AbstractValDslScopeProvider {
	
    override getScope(EObject context, EReference reference) {
        if (context instanceof Entity
                && reference == ValDslPackage.Literals.ENTITY__SUPER_ENTITY) {
            val rootElement = EcoreUtil2.getRootContainer(context)
            val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
            val existingScope = Scopes.scopeFor(candidates)
            // Scope that filters out the context element from the candidates list
            return new FilteringScope(existingScope, [getEObjectOrProxy != context])
        }
        return super.getScope(context, reference);
    }

}
